3c3
< /// @title The Nouns ERC-721 token
---
> /// @title The Nouns ERC-721 token, adjusted for forks
20,25c20,24
< import { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';
< import { ERC721Checkpointable } from './base/ERC721Checkpointable.sol';
< import { INounsDescriptorMinimal } from './interfaces/INounsDescriptorMinimal.sol';
< import { INounsSeeder } from './interfaces/INounsSeeder.sol';
< import { INounsToken } from './interfaces/INounsToken.sol';
< import { ERC721 } from './base/ERC721.sol';
---
> import { OwnableUpgradeable } from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';
> import { ERC721CheckpointableUpgradeable } from './base/ERC721CheckpointableUpgradeable.sol';
> import { INounsDescriptorMinimal } from '../../../../interfaces/INounsDescriptorMinimal.sol';
> import { INounsSeeder } from '../../../../interfaces/INounsSeeder.sol';
> import { INounsTokenFork } from './INounsTokenFork.sol';
27c26,27
< import { IProxyRegistry } from './external/opensea/IProxyRegistry.sol';
---
> import { UUPSUpgradeable } from '@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol';
> import { INounsDAOForkEscrow } from '../../../NounsDAOInterfaces.sol';
29,31c29,44
< contract NounsToken is INounsToken, Ownable, ERC721Checkpointable {
<     // The nounders DAO address (creators org)
<     address public noundersDAO;
---
> /**
>  * @dev This contract is a fork of NounsToken, with the following changes:
>  * - Added upgradeablity via UUPSUpgradeable.
>  * - Inheriting from an unmodified ERC721, so that the double Transfer event emission that
>  *   NounsToken performs is gone, in favor of the standard single event.
>  * - Added functions to claim tokens from a Nouns Fork escrow, or during the forking period.
>  * - Removed the proxyRegistry feature that whitelisted OpenSea.
>  * - Removed `noundersDAO` and the founder reward every 10 mints.
>  * For additional context see `ERC721CheckpointableUpgradeable`.
>  */
> contract NounsTokenFork is INounsTokenFork, OwnableUpgradeable, ERC721CheckpointableUpgradeable, UUPSUpgradeable {
>     error OnlyOwner();
>     error OnlyTokenOwnerCanClaim();
>     error OnlyOriginalDAO();
>     error NoundersCannotBeAddressZero();
>     error OnlyDuringForkingPeriod();
33c46,48
<     // An address who has permissions to mint Nouns
---
>     string public constant NAME = 'NounsTokenFork';
> 
>     /// @notice  An address who has permissions to mint Nouns
36c51
<     // The Nouns token URI descriptor
---
>     /// @notice The Nouns token URI descriptor
39c54
<     // The Nouns token seeder
---
>     /// @notice The Nouns token seeder
42c57,69
<     // Whether the minter can be updated
---
>     /// @notice The escrow contract used to verify ownership of the original Nouns in the post-fork claiming process
>     INounsDAOForkEscrow public escrow;
> 
>     /// @notice The fork ID, used when querying the escrow for token ownership
>     uint32 public forkId;
> 
>     /// @notice How many tokens are still available to be claimed by Nouners who put their original Nouns in escrow
>     uint256 public remainingTokensToClaim;
> 
>     /// @notice The forking period expiration timestamp, afterwhich new tokens cannot be claimed by the original DAO
>     uint256 public forkingPeriodEndTimestamp;
> 
>     /// @notice Whether the minter can be updated
45c72
<     // Whether the descriptor can be updated
---
>     /// @notice Whether the descriptor can be updated
48c75
<     // Whether the seeder can be updated
---
>     /// @notice Whether the seeder can be updated
51c78
<     // The noun seeds
---
>     /// @notice The noun seeds
54c81
<     // The internal noun ID tracker
---
>     /// @notice The internal noun ID tracker
57c84
<     // IPFS content hash of contract-level metadata
---
>     /// @notice IPFS content hash of contract-level metadata
60,62d86
<     // OpenSea's Proxy Registry
<     IProxyRegistry public immutable proxyRegistry;
< 
88,95d111
<      * @notice Require that the sender is the nounders DAO.
<      */
<     modifier onlyNoundersDAO() {
<         require(msg.sender == noundersDAO, 'Sender is not the nounders DAO');
<         _;
<     }
< 
<     /**
103,104c119,120
<     constructor(
<         address _noundersDAO,
---
>     function initialize(
>         address _owner,
106,110c122,129
<         INounsDescriptorMinimal _descriptor,
<         INounsSeeder _seeder,
<         IProxyRegistry _proxyRegistry
<     ) ERC721('Nouns', 'NOUN') {
<         noundersDAO = _noundersDAO;
---
>         INounsDAOForkEscrow _escrow,
>         uint32 _forkId,
>         uint256 startNounId,
>         uint256 tokensToClaim,
>         uint256 _forkingPeriodEndTimestamp
>     ) external initializer {
>         __ERC721_init('Nouns', 'NOUN');
>         _transferOwnership(_owner);
112,114c131,139
<         descriptor = _descriptor;
<         seeder = _seeder;
<         proxyRegistry = _proxyRegistry;
---
>         escrow = _escrow;
>         forkId = _forkId;
>         _currentNounId = startNounId;
>         remainingTokensToClaim = tokensToClaim;
>         forkingPeriodEndTimestamp = _forkingPeriodEndTimestamp;
> 
>         NounsTokenFork originalToken = NounsTokenFork(address(escrow.nounsToken()));
>         descriptor = originalToken.descriptor();
>         seeder = originalToken.seeder();
117a143,176
>      * @notice Claim new tokens if you escrowed original Nouns and forked into a new DAO governed by holders of this
>      * token.
>      * @dev Reverts if the sender is not the owner of the escrowed token.
>      * @param tokenIds The token IDs to claim
>      */
>     function claimFromEscrow(uint256[] calldata tokenIds) external {
>         for (uint256 i = 0; i < tokenIds.length; i++) {
>             uint256 nounId = tokenIds[i];
>             if (escrow.ownerOfEscrowedToken(forkId, nounId) != msg.sender) revert OnlyTokenOwnerCanClaim();
> 
>             _mintWithOriginalSeed(msg.sender, nounId);
>         }
> 
>         remainingTokensToClaim -= tokenIds.length;
>     }
> 
>     /**
>      * @notice The original DAO can claim tokens during the forking period, on behalf of Nouners who choose to join
>      * a new fork DAO. Does not allow the original DAO to claim once the forking period has ended.
>      * @dev Assumes the original DAO is honest during the forking period.
>      * @param to The recipient of the tokens
>      * @param tokenIds The token IDs to claim
>      */
>     function claimDuringForkPeriod(address to, uint256[] calldata tokenIds) external {
>         if (msg.sender != escrow.dao()) revert OnlyOriginalDAO();
>         if (block.timestamp > forkingPeriodEndTimestamp) revert OnlyDuringForkingPeriod();
> 
>         for (uint256 i = 0; i < tokenIds.length; i++) {
>             uint256 nounId = tokenIds[i];
>             _mintWithOriginalSeed(to, nounId);
>         }
>     }
> 
>     /**
133,143d191
<      * @notice Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.
<      */
<     function isApprovedForAll(address owner, address operator) public view override(IERC721, ERC721) returns (bool) {
<         // Whitelist OpenSea proxy contract for easy trading.
<         if (proxyRegistry.proxies(owner) == operator) {
<             return true;
<         }
<         return super.isApprovedForAll(owner, operator);
<     }
< 
<     /**
150,152d197
<         if (_currentNounId <= 1820 && _currentNounId % 10 == 0) {
<             _mintTo(noundersDAO, _currentNounId++);
<         }
183,192d227
<      * @notice Set the nounders DAO.
<      * @dev Only callable by the nounders DAO when not locked.
<      */
<     function setNoundersDAO(address _noundersDAO) external onlyNoundersDAO {
<         noundersDAO = _noundersDAO;
< 
<         emit NoundersDAOUpdated(_noundersDAO);
<     }
< 
<     /**
258c293
<         _mint(owner(), to, nounId);
---
>         _mint(to, nounId);
262a298,318
> 
>     /**
>      * @notice Mint a new token using the original Nouns seed.
>      */
>     function _mintWithOriginalSeed(address to, uint256 nounId) internal {
>         (uint48 background, uint48 body, uint48 accessory, uint48 head, uint48 glasses) = NounsTokenFork(
>             address(escrow.nounsToken())
>         ).seeds(nounId);
>         INounsSeeder.Seed memory seed = INounsSeeder.Seed(background, body, accessory, head, glasses);
> 
>         seeds[nounId] = seed;
>         _mint(to, nounId);
> 
>         emit NounCreated(nounId, seed);
>     }
> 
>     /**
>      * @dev Reverts when `msg.sender` is not the owner of this contract; in the case of Noun DAOs it should be the
>      * DAO's treasury contract.
>      */
>     function _authorizeUpgrade(address) internal view override onlyOwner {}
