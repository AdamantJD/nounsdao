3c3
< /// @title The Nouns DAO executor and treasury
---
> /// @title The Nouns DAO executor and treasury, supporting DAO fork
19c19
< // NounsDAOExecutor.sol is a modified version of Compound Lab's Timelock.sol:
---
> // NounsDAOExecutor2.sol is a modified version of Compound Lab's Timelock.sol:
27a28,30
> // NounsDAOExecutor2.sol is a modified version of NounsDAOExecutor.sol
> //
> // NounsDAOExecutor.sol modifications:
29a33,38
> //
> //
> // NounsDAOExecutor2.sol modifications:
> // - `sendETH` and `sendERC20` functions used for DAO forks
> // - is upgradable via UUPSUpgradeable. uses intializer instead of constructor.
> // - `GRACE_PERIOD` has been increased from 14 days to 21 days to allow more time in case of a forking period
33c42,46
< contract NounsDAOExecutor {
---
> import { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';
> import { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';
> import { UUPSUpgradeable } from '@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol';
> 
> contract NounsDAOExecutorV2 is UUPSUpgradeable, Initializable {
60a74,75
>     event ETHSent(address indexed to, uint256 amount, bool success);
>     event ERC20Sent(address indexed to, address indexed erc20Token, uint256 amount, bool success);
62c77,80
<     uint256 public constant GRACE_PERIOD = 14 days;
---
>     string public constant NAME = 'NounsDAOExecutorV2';
> 
>     /// @dev increased grace period from 14 days to 21 days to allow more time in case of a forking period
>     uint256 public constant GRACE_PERIOD = 21 days;
72c90
<     constructor(address admin_, uint256 delay_) {
---
>     function initialize(address admin_, uint256 delay_) public virtual initializer {
188a207,243
> 
>     function sendETH(address newDAOTreasury, uint256 ethToSend) external returns (bool success) {
>         require(msg.sender == admin, 'NounsDAOExecutor::executeTransaction: Call must come from admin.');
> 
>         (success, ) = newDAOTreasury.call{ value: ethToSend }('');
> 
>         emit ETHSent(newDAOTreasury, ethToSend, success);
>     }
> 
>     function sendERC20(
>         address newDAOTreasury,
>         address erc20Token,
>         uint256 tokensToSend
>     ) external returns (bool success) {
>         require(msg.sender == admin, 'NounsDAOExecutor::executeTransaction: Call must come from admin.');
> 
>         success = IERC20(erc20Token).transfer(newDAOTreasury, tokensToSend);
> 
>         emit ERC20Sent(newDAOTreasury, erc20Token, tokensToSend, success);
>     }
> 
>     /**
>      * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by
>      * {upgradeTo} and {upgradeToAndCall}.
>      *
>      * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.
>      *
>      * ```solidity
>      * function _authorizeUpgrade(address) internal override onlyOwner {}
>      * ```
>      */
>     function _authorizeUpgrade(address) internal view override {
>         require(
>             msg.sender == address(this),
>             'NounsDAOExecutor::_authorizeUpgrade: Call must come from NounsDAOExecutor.'
>         );
>     }
