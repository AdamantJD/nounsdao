18a19
> // NounsDAOLogicV1Fork.sol is a modified version of NounsDAOLogicV1.sol.
27a29,61
> // NounsDAOLogicV1Fork adds:
> // - `quit(tokenIds)`, a function that allows token holders to quit the DAO, taking their pro rata funds,
> //   and sending their tokens to the DAO treasury.
> //
> // - `adjustedTotalSupply`, the total supply calculation used in DAO functions like quorum and proposal threshold, in
> //   which the DAO exludes tokens held by the treasury, such that tokens used to quit the DAO are not counted.
> //
> // - A function for the DAO to set which ERC20s are transferred pro rata in the `quit` function.
> //
> // - A new proposals getter function, since adding new fields to Proposal results in the default getter hitting a
> //   `Stack too deep` error.
> //
> // - A new Proposal field: `creationBlock`, used to resolve the `votingDelay` bug, in which editing `votingDelay` would
> //  change the votes snapshot block for proposals in-progress.
> //
> // NounsDAOLogicV1Fork modifies:
> // - The proxy pattern from Compound's old Transparent-like proxy, to OpenZeppelin's recommended UUPS pattern.
> //
> // - `propose`
> //   - uses `adjutedTotalSupply`
> //   - includes a new 'delayed governance' feature which gives forkers from the original DAO time to claim their tokens
> //     with this new DAO; proposals are not allowed until all tokens are claimed, or until the delay expiration
> //     timestamp is reached.
> //
> // - `cancel` bugfix, allowing proposals to be canceled by anyone if the proposer's vote balance is equal to proposal
> //   threshold.
> //
> // - Removes the vetoer role and logic related to it. The quit function provides minority protection instead of the
> //   vetoer, and fork DAOs can upgrade their governor to include the vetoer feature if it's needed.
> //
> // - Modified MIN_VOTING_PERIOD, MAX_VOTING_PERIOD to correct block numbers assuming 12 second blocks
> // - Modified MAX_VOTING_DELAY to be 2 weeks
> //
63c97,103
< import './NounsDAOInterfaces.sol';
---
> import { UUPSUpgradeable } from '@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol';
> import { NounsDAOEventsFork } from './NounsDAOEventsFork.sol';
> import { NounsDAOStorageV1Fork } from './NounsDAOStorageV1Fork.sol';
> import { NounsDAOExecutorV2 } from '../../../NounsDAOExecutorV2.sol';
> import { NounsTokenForkLike } from './NounsTokenForkLike.sol';
> import { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';
> import { ReentrancyGuardUpgradeable } from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';
65c105,113
< contract NounsDAOLogicV1 is NounsDAOStorageV1, NounsDAOEvents {
---
> contract NounsDAOLogicV1Fork is UUPSUpgradeable, ReentrancyGuardUpgradeable, NounsDAOStorageV1Fork, NounsDAOEventsFork {
>     error AdminOnly();
>     error WaitingForTokensToClaimOrExpiration();
>     error QuitETHTransferFailed();
>     error QuitERC20TransferFailed();
> 
>     event ERC20TokensToIncludeInQuitSet(address[] oldErc20Tokens, address[] newErc20tokens);
>     event Quit(address indexed msgSender, uint256[] tokenIds);
> 
76c124
<     uint256 public constant MIN_VOTING_PERIOD = 5_760; // About 24 hours
---
>     uint256 public constant MIN_VOTING_PERIOD = 7_200; // 24 hours
79c127
<     uint256 public constant MAX_VOTING_PERIOD = 80_640; // About 2 weeks
---
>     uint256 public constant MAX_VOTING_PERIOD = 100_800; // 2 weeks
85c133
<     uint256 public constant MAX_VOTING_DELAY = 40_320; // About 1 week
---
>     uint256 public constant MAX_VOTING_DELAY = 100_800; // 2 weeks
104a153,154
>      * @dev Not asserting that param values are within the hard-coded bounds in order to make it easier to run
>      * manual tests; seems a safe decision since we assume fork DAOs are initialized by `ForkDAODeployer`
107d156
<      * @param vetoer_ The address allowed to unilaterally veto proposals
111c160,162
<      * * @param quorumVotesBPS_ The initial quorum votes threshold in basis points
---
>      * @param quorumVotesBPS_ The initial quorum votes threshold in basis points
>      * @param erc20TokensToIncludeInQuit_ The initial list of ERC20 tokens to include when quitting
>      * @param delayedGovernanceExpirationTimestamp_ The delayed governance expiration timestamp
116d166
<         address vetoer_,
120c170,172
<         uint256 quorumVotesBPS_
---
>         uint256 quorumVotesBPS_,
>         address[] memory erc20TokensToIncludeInQuit_,
>         uint256 delayedGovernanceExpirationTimestamp_
121a174
>         __ReentrancyGuard_init_unchained();
123d175
<         require(msg.sender == admin, 'NounsDAO::initialize: admin only');
126,141d177
<         require(
<             votingPeriod_ >= MIN_VOTING_PERIOD && votingPeriod_ <= MAX_VOTING_PERIOD,
<             'NounsDAO::initialize: invalid voting period'
<         );
<         require(
<             votingDelay_ >= MIN_VOTING_DELAY && votingDelay_ <= MAX_VOTING_DELAY,
<             'NounsDAO::initialize: invalid voting delay'
<         );
<         require(
<             proposalThresholdBPS_ >= MIN_PROPOSAL_THRESHOLD_BPS && proposalThresholdBPS_ <= MAX_PROPOSAL_THRESHOLD_BPS,
<             'NounsDAO::initialize: invalid proposal threshold'
<         );
<         require(
<             quorumVotesBPS_ >= MIN_QUORUM_VOTES_BPS && quorumVotesBPS_ <= MAX_QUORUM_VOTES_BPS,
<             'NounsDAO::initialize: invalid proposal threshold'
<         );
148,150c184,186
<         timelock = INounsDAOExecutor(timelock_);
<         nouns = NounsTokenLike(nouns_);
<         vetoer = vetoer_;
---
>         admin = timelock_;
>         timelock = NounsDAOExecutorV2(payable(timelock_));
>         nouns = NounsTokenForkLike(nouns_);
154a191,192
>         erc20TokensToIncludeInQuit = erc20TokensToIncludeInQuit_;
>         delayedGovernanceExpirationTimestamp = delayedGovernanceExpirationTimestamp_;
156a195,223
>     /**
>      * @notice A function that allows token holders to quit the DAO, taking their pro rata funds,
>      * and sending their tokens to the DAO treasury.
>      * Will revert as long as not all tokens were claimed, and as long as the delayed governance has not expired.
>      * @param tokenIds The token ids to quit with
>      */
>     function quit(uint256[] calldata tokenIds) external nonReentrant {
>         checkGovernanceActive();
> 
>         uint256 totalSupply = adjustedTotalSupply();
> 
>         for (uint256 i = 0; i < tokenIds.length; i++) {
>             nouns.transferFrom(msg.sender, address(timelock), tokenIds[i]);
>         }
> 
>         for (uint256 i = 0; i < erc20TokensToIncludeInQuit.length; i++) {
>             IERC20 erc20token = IERC20(erc20TokensToIncludeInQuit[i]);
>             uint256 tokensToSend = (erc20token.balanceOf(address(timelock)) * tokenIds.length) / totalSupply;
>             bool erc20Sent = timelock.sendERC20(msg.sender, address(erc20token), tokensToSend);
>             if (!erc20Sent) revert QuitERC20TransferFailed();
>         }
> 
>         uint256 ethToSend = (address(timelock).balance * tokenIds.length) / totalSupply;
>         bool ethSent = timelock.sendETH(msg.sender, ethToSend);
>         if (!ethSent) revert QuitETHTransferFailed();
> 
>         emit Quit(msg.sender, tokenIds);
>     }
> 
166a234
>      * Will revert as long as not all tokens were claimed, and as long as the delayed governance has not expired.
180a249,250
>         checkGovernanceActive();
> 
183c253
<         temp.totalSupply = nouns.totalSupply();
---
>         temp.totalSupply = adjustedTotalSupply();
217c287
<         Proposal storage newProposal = proposals[proposalCount];
---
>         Proposal storage newProposal = _proposals[proposalCount];
235c305
<         newProposal.vetoed = false;
---
>         newProposal.creationBlock = block.number;
270a341,351
>      * @notice Internal function that reverts if the governance is not active yet. Governance becomes active as soon as
>      * one of these conditions is met:
>      * 1. All tokens are claimed
>      * 2. The delayed governance expiration timestamp is reached
>      */
>     function checkGovernanceActive() internal view {
>         if (block.timestamp < delayedGovernanceExpirationTimestamp && nouns.remainingTokensToClaim() > 0)
>             revert WaitingForTokensToClaimOrExpiration();
>     }
> 
>     /**
279c360
<         Proposal storage proposal = proposals[proposalId];
---
>         Proposal storage proposal = _proposals[proposalId];
317c398
<         Proposal storage proposal = proposals[proposalId];
---
>         Proposal storage proposal = _proposals[proposalId];
338c419
<         Proposal storage proposal = proposals[proposalId];
---
>         Proposal storage proposal = _proposals[proposalId];
341c422
<                 nouns.getPriorVotes(proposal.proposer, block.number - 1) < proposal.proposalThreshold,
---
>                 nouns.getPriorVotes(proposal.proposer, block.number - 1) <= proposal.proposalThreshold,
360,384d440
<      * @notice Vetoes a proposal only if sender is the vetoer and the proposal has not been executed.
<      * @param proposalId The id of the proposal to veto
<      */
<     function veto(uint256 proposalId) external {
<         require(vetoer != address(0), 'NounsDAO::veto: veto power burned');
<         require(msg.sender == vetoer, 'NounsDAO::veto: only vetoer');
<         require(state(proposalId) != ProposalState.Executed, 'NounsDAO::veto: cannot veto executed proposal');
< 
<         Proposal storage proposal = proposals[proposalId];
< 
<         proposal.vetoed = true;
<         for (uint256 i = 0; i < proposal.targets.length; i++) {
<             timelock.cancelTransaction(
<                 proposal.targets[i],
<                 proposal.values[i],
<                 proposal.signatures[i],
<                 proposal.calldatas[i],
<                 proposal.eta
<             );
<         }
< 
<         emit ProposalVetoed(proposalId);
<     }
< 
<     /**
402c458
<         Proposal storage p = proposals[proposalId];
---
>         Proposal storage p = _proposals[proposalId];
413c469
<         return proposals[proposalId].receipts[voter];
---
>         return _proposals[proposalId].receipts[voter];
423,426c479,480
<         Proposal storage proposal = proposals[proposalId];
<         if (proposal.vetoed) {
<             return ProposalState.Vetoed;
<         } else if (proposal.canceled) {
---
>         Proposal storage proposal = _proposals[proposalId];
>         if (proposal.canceled) {
442a497,523
>     }
> 
>     /**
>      * @notice Returns the proposal details given a proposal id.
>      * @dev this explicit getter solves the `Stack too deep` problem that arose after
>      * adding a new field to the Proposal struct.
>      * @param proposalId the proposal id to get the data for
>      * @return A `ProposalCondensed` struct with the proposal data
>      */
>     function proposals(uint256 proposalId) external view returns (ProposalCondensed memory) {
>         Proposal storage proposal = _proposals[proposalId];
>         return
>             ProposalCondensed({
>                 id: proposal.id,
>                 proposer: proposal.proposer,
>                 proposalThreshold: proposal.proposalThreshold,
>                 quorumVotes: proposal.quorumVotes,
>                 eta: proposal.eta,
>                 startBlock: proposal.startBlock,
>                 endBlock: proposal.endBlock,
>                 forVotes: proposal.forVotes,
>                 againstVotes: proposal.againstVotes,
>                 abstainVotes: proposal.abstainVotes,
>                 canceled: proposal.canceled,
>                 executed: proposal.executed,
>                 creationBlock: proposal.creationBlock
>             });
480c561
<             abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainIdInternal(), address(this))
---
>             abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), block.chainid, address(this))
503c584
<         Proposal storage proposal = proposals[proposalId];
---
>         Proposal storage proposal = _proposals[proposalId];
508c589
<         uint96 votes = nouns.getPriorVotes(voter, proposal.startBlock - votingDelay);
---
>         uint96 votes = nouns.getPriorVotes(voter, proposal.creationBlock);
634,635c715
<      * @notice Changes vetoer address
<      * @dev Vetoer function for updating vetoer address
---
>      * @notice Admin function for setting the list of ERC20 tokens to transfer on `quit`.
637,638c717,718
<     function _setVetoer(address newVetoer) public {
<         require(msg.sender == vetoer, 'NounsDAO::_setVetoer: vetoer only');
---
>     function _setErc20TokensToIncludeInQuit(address[] calldata erc20tokens) external {
>         if (msg.sender != admin) revert AdminOnly();
640c720,721
<         emit NewVetoer(vetoer, newVetoer);
---
>         address[] memory oldErc20TokensToIncludeInQuit = erc20TokensToIncludeInQuit;
>         erc20TokensToIncludeInQuit = erc20tokens;
642c723
<         vetoer = newVetoer;
---
>         emit ERC20TokensToIncludeInQuitSet(oldErc20TokensToIncludeInQuit, erc20tokens);
646,656d726
<      * @notice Burns veto priviledges
<      * @dev Vetoer function destroying veto power forever
<      */
<     function _burnVetoPower() public {
<         // Check caller is pendingAdmin and pendingAdmin ≠ address(0)
<         require(msg.sender == vetoer, 'NounsDAO::_burnVetoPower: vetoer only');
< 
<         _setVetoer(address(0));
<     }
< 
<     /**
661c731
<         return bps2Uint(proposalThresholdBPS, nouns.totalSupply());
---
>         return bps2Uint(proposalThresholdBPS, adjustedTotalSupply());
669c739
<         return bps2Uint(quorumVotesBPS, nouns.totalSupply());
---
>         return bps2Uint(quorumVotesBPS, adjustedTotalSupply());
671a742,745
>     function adjustedTotalSupply() public view returns (uint256) {
>         return nouns.totalSupply() - nouns.balanceOf(address(timelock));
>     }
> 
676,681c750,751
<     function getChainIdInternal() internal view returns (uint256) {
<         uint256 chainId;
<         assembly {
<             chainId := chainid()
<         }
<         return chainId;
---
>     function _authorizeUpgrade(address) internal view override {
>         require(msg.sender == admin, 'NounsDAO::_authorizeUpgrade: admin only');
